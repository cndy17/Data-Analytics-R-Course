---
title: "Retirement Plan Evaluation"
author: "Cindy Li"
---

# Introduction


```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code

```

# Data Ingesting
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: Load Libraries
if (!require("readr")) install.packages("readr")
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("tidyr")) install.packages("tidyr")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("DT")) install.packages("DT")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("gt")) install.packages("gt")
if (!require("plotly")) install.packages("plotly")
if (!require("purr")) install.packages("purr")
if (!require("httr2")) install.packages("httr2")

library(readr)
library(sf)
library(dplyr)
library(tidyr)
library(tidyverse)
library(DT)
library(ggplot2)
library(gt)
library(plotly)
library(purrr)
library(httr2)

```

## Load Data
In this project, I am using data from FRED and Alpha Vantage using private API keys.
The data sets I will be pulling are as follows:
**FRED:**
- Average Hourly Earnings of All Employees
- CPI for All Urban Consumers: U.S. City Average, All Items
- 10-Year Treasury Constant Maturity Rate (Bond Market)
- 3-Month Treasury Bill: Secondary Market Rate (Short Term Debt)
**Alpha Vantage:**
- SPY US Equity Market Returns
- All Country World Index (International Equity Market Returns)

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code

# AlphaVantage: a commercial stock market data provider
alpha_key <- readLines("AlphaVantage_key.txt")
# FRED: the Federal Reserve Economic Data repository
fred_key <- readLines("fred_key.txt")

# Wage growth
# FRED: AHETPI (Average Hourly Earnings of All Employees, Total Private)
wage_url <- paste0("https://api.stlouisfed.org/fred/series/observations?series_id=AHETPI&api_key=", fred_key, "&file_type=json&frequency=m")
wage_response <- request(wage_url) |> req_perform()
wage_data <- resp_body_json(wage_response)[["observations"]]
wage_df <- data.frame(date = sapply(wage_data, function(x) x$date),
                      wage = sapply(wage_data, function(x) as.numeric(x$value)))
wage_df$date <- as.Date(wage_df$date)

# Inflation
# FRED: CPIAUCSL (CPI for All Urban Consumers: U.S. City Average, All Items)
inflation_url <- paste0("https://api.stlouisfed.org/fred/series/observations?series_id=CPIAUCSL&api_key=", fred_key, "&file_type=json&frequency=m")
inflation_response <- request(inflation_url) |> req_perform()
inflation_data <- resp_body_json(inflation_response)[["observations"]]
inflation_df <- data.frame(date = sapply(inflation_data, function(x) x$date),
                           inflation = sapply(inflation_data, function(x) as.numeric(x$value)))
inflation_df$date <- as.Date(inflation_df$date)

# US Equity Market total returns
# AlphaVantage: TIME_SERIES_DAILY
# API Request for US Equity Market Returns (SPY)
spy_url <- paste0("https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=SPY&apikey=", alpha_key, "&outputsize=full&datatype=json")
spy_response <- request(spy_url) |> req_perform()
spy_data <- resp_body_json(spy_response)[["Time Series (Daily)"]]
spy_df <- data.frame(date = as.Date(names(spy_data)),
                     adj_close = sapply(spy_data, function(x) as.numeric(x[["4. close"]])))
# Calculate daily returns based on the unadjusted close price
spy_df$daily_return <- c(NA, diff(spy_df$adj_close) / head(spy_df$adj_close, -1))
spy_df <- spy_df[complete.cases(spy_df), ]   # Remove rows with NA

# International Equity Market total returns 
# All Country World Index
# AlphaVantage: TIME_SERIES_DAILY_ADJUSTED
# API Request for International Equity Market Returns:
acwi_url <- paste0("https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=ACWI&apikey=", alpha_key, "&outputsize=full&datatype=json")
acwi_response <- request(acwi_url) |> req_perform()
acwi_data <- resp_body_json(acwi_response)[["Time Series (Daily)"]]

# Calculate daily returns based on adjusted closing price
acwi_df <- data.frame(date = as.Date(names(acwi_data)),
                      adj_close = sapply(acwi_data, function(x) as.numeric(x[["4. close"]])))
acwi_df$daily_return <- c(NA, diff(acwi_df$adj_close) / head(acwi_df$adj_close, -1))
acwi_df <- acwi_df[complete.cases(acwi_df), ]

# Bond market total returns
# FRED: GS10 (10-Year Treasury Constant Maturity Rate)
bond_url <- paste0("https://api.stlouisfed.org/fred/series/observations?series_id=GS10&api_key=", fred_key, "&file_type=json&frequency=m")
bond_response <- request(bond_url) |> req_perform()
bond_data <- resp_body_json(bond_response)[["observations"]]
bond_df <- data.frame(date = sapply(bond_data, function(x) x$date),
                      bond_return = sapply(bond_data, function(x) as.numeric(x$value)))
bond_df$date <- as.Date(bond_df$date)

# Short-term debt returns7
# FRED: DTB3 (3-Month Treasury Bill: Secondary Market Rate)
debt_url <- paste0("https://api.stlouisfed.org/fred/series/observations?series_id=DTB3&api_key=", fred_key, "&file_type=json&frequency=m")
debt_response <- request(debt_url) |> req_perform()
debt_data <- resp_body_json(debt_response)[["observations"]]
debt_df <- data.frame(date = sapply(debt_data, function(x) x$date),
                      debt_return = sapply(debt_data, function(x) as.numeric(x$value)))
debt_df$date <- as.Date(debt_df$date)

```

## Data Processing
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# Ensure all data frames are on a monthly frequency (aggregate if necessary) 
# to have years of data but less granularity
wage_df$date <- as.Date(wage_df$date)
inflation_df$date <- as.Date(inflation_df$date)
bond_df$date <- as.Date(bond_df$date)
debt_df$date <- as.Date(debt_df$date)
spy_df$date <- as.Date(spy_df$date)
acwi_df$date <- as.Date(acwi_df$date)

# Aggregate data to monthly frequency
WAGE <- aggregate(wage_df$wage, by = list(date = format(wage_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)
INFLATION <- aggregate(inflation_df$inflation, by = list(date = format(inflation_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)
BOND <- aggregate(bond_df$bond_return, by = list(date = format(bond_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)
DEBT <- aggregate(debt_df$debt_return, by = list(date = format(debt_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)

# Aggregate SPY and ACWI data to monthly frequency (from daily data)
SPY <- aggregate(spy_df$daily_return, by = list(date = format(spy_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)
ACWI <- aggregate(acwi_df$daily_return, by = list(date = format(acwi_df$date, "%Y-%m-01")), FUN = mean, na.rm = TRUE)

WAGE$date <- as.Date(WAGE$date)
INFLATION$date <- as.Date(INFLATION$date)
BOND$date <- as.Date(BOND$date)
DEBT$date <- as.Date(DEBT$date)
SPY$date <- as.Date(SPY$date)
ACWI$date <- as.Date(ACWI$date)

# Rename columns to avoid duplicates
WAGE <- WAGE |> rename(wage = x)
INFLATION <- INFLATION |> rename(CPI = x)
SPY <- SPY |> rename(equity_return_SPY = x)
ACWI <- ACWI |> rename(equity_return_ACWI = x)
BOND <- BOND |> rename(bond_return = x)
DEBT <- DEBT |> rename(debt_return = x)
WAGE <- WAGE |> mutate(wage_growth_percent = (wage - lag(wage)) / lag(wage)) 
INFLATION <- INFLATION |> mutate(inflation_rate = (CPI - lag(CPI)) / lag(CPI))

# Merge all dataframes into one combined dataset
combined_data <- reduce(list(WAGE, INFLATION, SPY, ACWI, BOND, DEBT), 
                        function(x, y) merge(x, y, by = "date", all = TRUE))
```

# Initial Analysis
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code


long_run_averages <- combined_data |>
  summarise(
    wage_avg = mean(wage, na.rm = TRUE),
    wage_growth_avg = mean(wage_growth_percent, na.rm = TRUE),
    inflation_avg = mean(inflation_rate, na.rm = TRUE),
    equity_return_SPY_avg = mean(equity_return_SPY, na.rm = TRUE),
    equity_return_ACWI_avg = mean(equity_return_ACWI, na.rm = TRUE),
    bond_return_avg = mean(bond_return, na.rm = TRUE),
    debt_return_avg = mean(debt_return, na.rm = TRUE)
  )
# Table Display
averages_flip <- long_run_averages |>
  pivot_longer(cols = everything(), names_to = "Metric", values_to = "Average") |>
  mutate(Metric = recode(Metric,
                         wage_avg = "Average Wage",
                         wage_growth_avg = "Average Wage Growth (%)",
                         inflation_avg = "Average Inflation Rate (%)",
                         equity_return_SPY_avg = "Average SPY Equity Return (%)",
                         equity_return_ACWI_avg = "Average ACWI Equity Return (%)",
                         bond_return_avg = "Average Bond Return (%)",
                         debt_return_avg = "Average Debt Return (%)"))
averages_flip|>
  gt() |>
  tab_header(title = "Long-Run Averages") |>
  cols_label(Metric = "Financial Metric",
    Average = "Average Value") |>
  fmt_number(columns = vars(Average),
    decimals = 4)
```

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
long_run_data <- combined_data|>
  select(
    wage, inflation_rate, equity_return_SPY, equity_return_ACWI, bond_return, debt_return
  ) |>
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")

ggplot(long_run_data, aes(x = "", y = Value)) +
  geom_boxplot() +
  facet_wrap(~ Variable, scales = "free_y") +  # Facets for each variable with independent y-axis scales
  labs(title = "Boxplot of Financial Variables", 
       x = "", 
       y = "Values") +
  theme_minimal() +
  theme(axis.text.x = element_blank())
```

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
cor_matrix <- cor(combined_data[, -1], use = "complete.obs")
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust")
```

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
correlation_heatmap <- cor_matrix|>
  as_tibble(rownames = "variable1") |>
  pivot_longer(cols = -variable1, names_to = "variable2", values_to = "correlation")

ggplot(correlation_heatmap, aes(x = variable1, y = variable2, fill = correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  labs(title = "Correlation Heatmap",
       x = "Variable", y = "Variable", fill = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Comparison of TRS and ORP
**TRS:** traditional pension plan: after retirement, the employer pays employees a fraction of their salary until death. aka “defined-benefit plan”
- benefit is fixed
- employer takes the market risk
- If the market underperforms expectations, CUNY has to “pony up” and make up the gap
- If the market overperforms expectations, CUNY pockets the excess balance.
- Your pension will not be based on the contributions you paid into the system. [^1]
[^1] [New York State & Local Retirement System Member Contribution](https://www.osc.ny.gov/retirement/members/member-contributions#:~:text=Your%20pension%20will%20not%20be,of%20the%20Common%20Retirement%20Fund.)
## Teachers Retirement System (TRS)
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code

# Calculate Wage Growth
WAGE <- WAGE |> mutate(wage_growth_percent = (wage - lag(wage)) / lag(wage)) 
initial_salary <- 50000  # Hypothetical starting salary
start_date <- "2004-10-01"
end_date <- "2024-10-01" # 20 years
wage_20yrs <- WAGE |> 
  filter(date >= as.Date(start_date), !is.na(date))

salary_data <- wage_20yrs |>
  mutate(
    salary = initial_salary * cumprod(1 + lag(wage_growth_percent, default = 0))
  )
```

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# Inflation adjustment function
inflation_adjustment <- function(cpi) {
  adjustment <- ceiling(cpi * 0.5) / 100
  if (adjustment < 0.01) return(0.01)  
  if (adjustment > 0.03) return(0.03) 
  return(adjustment)
}

# 2024 TRS Contribution Calculation
# last 3 years of salary
salary_3yrs <- salary_data |> filter(date >= "2021-10-01")
years_of_service = 20
final_average_salary = mean(salary_3yrs$salary)
retirement_benefit <- function(n, fas) {
  if (n < 20) return (0.0167 * fas * n)
  else if (n == 20) return(0.0175 * fas * n)
  else return((0.35 + 0.02 * (n - 20)) * fas)
}

trs_benefit = retirement_benefit(years_of_service, final_average_salary)
print(trs_benefit)
```

## Optional Retirement Plan (ORP)
**ORP:** closer to a 401k plan, employee and employer make contribution to retirement account that is invested in mutual funds. aka “defined-contribution plan”
- only contribution is fixed
- depends on market performance

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# follow Fidelity Freedom Fund 
orp_contribution_rate <- function(salary) {
  if (salary <= 45000) return(0.03)
  else if (salary <= 55000) return(0.035)
  else if (salary <= 75000) return(0.045)
  else if (salary <= 100000) return(0.0575)
  else return(0.06)
}
employee_contrib_rate <- function(salary) {
  return(salary * orp_contribution_rate(salary))
}

# US Equities
us_equities_rate <- function(age) {
  if (age >= 25 && age <= 49) {
    return(0.54)
  } else if (age >= 50 && age <= 59) {
    return(0.47)
  } else if (age >= 60 && age <= 74) {
    return(0.34)
  } else if (age >= 75) {
    return(0.19)
  } else {
    return(NA)
  }
}

# International Equities
international_equities_rate <- function(age) {
  if (age >= 25 && age <= 49) {
    return(0.36)
  } else if (age >= 50 && age <= 59) {
    return(0.32)
  } else if (age >= 60 && age <= 74) {
    return(0.23)
  } else if (age >= 75) {
    return(0.13)
  } else {
    return(NA)
  }
}

# Bonds
bonds_rate <- function(age) {
  if (age >= 25 && age <= 49) {
    return(0.10)
  } else if (age >= 50 && age <= 59) {
    return(0.21)
  } else if (age >= 60 && age <= 74) {
    return(0.43)
  } else if (age >= 75) {
    return(0.62)
  } else {
    return(NA_real_) 
  }
}

# Short Term Debt
short_term_debt_rate <- function(age) {
  if (age >= 75) {
    return(0.06)  # Short-term debt only applies to age 75+
  } else {
    return(0.00)  # No short-term debt allocation for ages below 75
  }
}

# Fixed Employer Contribution at 7 years
employer_contrib_rate <- function(years) {
  if (years <= 7) return(0.08)
  else return(0.10)
}
```

### Portfolio Value
Use averages
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
long_run_avg_2004 <- combined_data |> 
  filter(date >= start_date) |>
  summarise(
    wage_avg = mean(wage, na.rm = TRUE),
    wage_growth_avg = mean(wage_growth_percent, na.rm = TRUE),
    inflation_avg = mean(inflation_rate, na.rm = TRUE),
    equity_return_SPY_avg = mean(equity_return_SPY, na.rm = TRUE),
    equity_return_ACWI_avg = mean(equity_return_ACWI, na.rm = TRUE),
    bond_return_avg = mean(bond_return, na.rm = TRUE),
    debt_return_avg = mean(debt_return, na.rm = TRUE)
  )

calculate_portfolio_value <- function(start_salary, years_worked, retirement_age, current_age) {
  total_contrib <- 0
  portfolio_value <- 0
  current_salary <- start_salary
  year <- 1
  
  # Simulate annual contributions and growth until retirement
  for (age in current_age:(retirement_age - 1)) {
    employee_contrib <- employee_contrib_rate(current_salary)
    employer_contrib <- current_salary*employer_contrib_rate(year)
    year <- year + 1
    total_contrib <- employee_contrib + employer_contrib
    portfolio_value <- portfolio_value + total_contrib
    # Asset allocation based on age
    us_equities_pct <- us_equities_rate(age)
    international_pct <- international_equities_rate(age)
    bonds_pct <- bonds_rate(age)
    short_term_pct <- short_term_debt_rate(age)
          cat(age, year, "employee", employee_contrib,"employer", employer_contrib, "portfolio value", portfolio_value, "\n")

    # convert to average annual returns
    us_equities_return <- (1 + long_run_avg_2004$equity_return_SPY_avg)^12 - 1
    international_return <- (1 + long_run_avg_2004$equity_return_ACWI_avg)^12 - 1
    bonds_return <- (1 + long_run_avg_2004$bond_return_avg / 100)^12 - 1
    short_term_return <- (1 + long_run_avg_2004$debt_return_avg / 100)^12 - 1

    # Calculate portfolio growth based on allocation
    portfolio_value <- portfolio_value * (1 + us_equities_pct * us_equities_return +
                                            international_pct * international_return +
                                            bonds_pct * bonds_return +
                                            short_term_pct * short_term_return)
    
    # Simulate salary increase
    current_salary <- current_salary * (1 + long_run_averages$wage_growth_avg + long_run_averages$inflation_avg)
  }
  
  return(portfolio_value)
}

start_age = 40
retirement_age = 65
portfolio_value_at_retirement <- calculate_portfolio_value(initial_salary, years_of_service, retirement_age, start_age)
print(portfolio_value_at_retirement)
```
## TRS First Month Retirement Benefit
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# Monthly TRS Benefit (assuming TRS benefit is paid monthly)
trs_monthly_benefit <- trs_benefit / 12
print(trs_monthly_benefit)
```

## ORP First Month Retirement Benefit
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# 2. **ORP: Calculate Portfolio Value at Retirement**
# the first month’s payout is typically a 4% withdrawal rate
# Sustainable withdrawal rate (e.g., 4% annually, which is 0.33% monthly)
orp_monthly_withdrawal <- portfolio_value_at_retirement * 0.04 / 12

comparison_table_gt <- tibble(
  Plan = c("TRS", "ORP"),
  First_Month_Retirement_Value = c(trs_monthly_benefit, orp_monthly_withdrawal)
) |>
  gt() |>
  tab_header(
    title = "Comparison of TRS and ORP for First Month of Retirement"
  ) |>
  cols_label(
    Plan = "Retirement Plan",
    First_Month_Retirement_Value = "First Month Retirement Value"
  ) |>
  fmt_currency(
    columns = vars(First_Month_Retirement_Value),
    currency = "USD",
    use_seps = TRUE,
    decimals = 0
  ) |>
  tab_spanner(
    label = "Retirement Plan",
    columns = vars(First_Month_Retirement_Value)
  )
comparison_table_gt
```
# Long Term Average Analysis
## TRS Withdrawals After Retirement
The inflation adjustement is effective each September and the CPI used is the aggregate monthly CPI of the previous 12 months; so the September 2024 adjustment depends on the CPI from September 2023 to August 2024.
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# TRS
# Set the number of retirement years

# TRS Monthly Benefit Calculation
# Function to calculate inflation adjustment based on CPI
inflation_adjustment <- function(CPI) {
  adjustment <- round(CPI * 0.5, 1)  # 50% of CPI increase, rounded to nearest 0.1%
  if (adjustment < 0.01) adjustment <- 0.01  # Floor at 1%
  if (adjustment > 0.03) adjustment <- 0.03  # Cap at 3%
  return(adjustment)
}

# Simulating pension benefit with inflation adjustments
simulate_trs_with_inflation <- function(initial_pension, inflation_data, retirement_date, end_date) {
  retirement_benefit <- numeric(total_years * 12) 
  retirement_benefit[1] <- initial_pension 
  current_pension <- initial_pension
  for (current_month in 2:length(retirement_benefit)) {
    current_date <- seq(retirement_date, length.out = length(retirement_benefit), by = "month")[current_month]
    # The inflation adjustment is effective each September
    if (format(current_date, "%m") == "09") {
      inflation_data_recent <- inflation_data[inflation_data$date < current_date,]
      last_12_months_inflation <- tail(inflation_data_recent$inflation_rate, 12)
      avg_inflation <- mean(last_12_months_inflation)
      adjustment <- inflation_adjustment(avg_inflation)
      current_pension <- current_pension * (1 + adjustment)
    }
    retirement_benefit[current_month] <- current_pension
  }
  return(retirement_benefit)
}

# using past infation rates due to data availability
# TRS benefit is assumed to be a fixed percentage of the employee's final salary
monthly_trs_pension <- TRS_benefit / 12 
retirement_date <- as.Date("2020-10-01")
end_date <- as.Date("2024-10-01")
total_years <- 20  
trs_income_stream <- simulate_trs_with_inflation(monthly_trs_pension, INFLATION, retirement_date, end_date)

# Print the total amount received over 20 years
total_received <- sum(trs_income_stream)
cat("Total amount received over 20 years: $", round(total_received, 2), "\n")

```

## ORP Withdrawals After Retirement
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# ORP
withdraw_after_retirement <- function(portfolio_value, withdrawal_rate = 0.04, years_retired = 20) {
  annual_withdrawal <- portfolio_value * withdrawal_rate
  remaining_balance <- portfolio_value
  withdrawals <- numeric(years_retired)
  for (year in 1:years_retired) {
    withdrawals[year] <- annual_withdrawal
    remaining_balance <- remaining_balance - annual_withdrawal
    remaining_balance <- remaining_balance * 1.03  # 3% growth during retirement
    if (remaining_balance < 0) {
      withdrawals[year] <- withdrawals[year] + remaining_balance  # Adjust last withdrawal
      break
    }
  }
  return(sum(withdrawals))
}

start_age = 40
retirement_age = 65
portfolio_value_at_retirement <- calculate_portfolio_value(initial_salary, years_of_service, retirement_age, start_age)
total_withdrawals <- withdraw_after_retirement(portfolio_value_at_retirement)
orp_difference = portfolio_value_at_retirement - total_withdrawals

cat("Portfolio value at retirement: $", round(portfolio_value_at_retirement, 2), "\n")
cat("Total withdrawals over retirement: $", round(total_withdrawals, 2), "\n")  
  
```

# Monte Carlo Analysis
## TRS Simulation
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
set.seed(123)  # For reproducibility
n_simulations <- 200

# TRS Simulation
simulate_trs_monte_carlo <- function(n_simulations, initial_salary, years_worked, wage_growth_data, inflation_data) {
  wage_growth_data <- na.omit(wage_growth_data)
  inflation_data <- na.omit(inflation_data)
  
  results <- numeric(n_simulations) 
  
  for (sim in 1:n_simulations) {
    salary <- initial_salary
    salaries <- numeric(years_worked)
    retirement_benefit <- numeric(years_worked * 12) 
    # Salary growth
    for (i in 1:years_worked) {
      growth_rate <- sample(wage_growth_data$wage_growth_percent, 1) 
      inflation_rate <- sample(inflation_data$inflation_rate, 1) 
      salary <- salary * (1 + growth_rate + inflation_rate)
      salaries[i] <- salary 
    }
    # Calculate Final Average Salary (FAS) based on the last 3 years of salary
    final_average_salary <- mean(tail(salaries, 3))
    
    trs_benefit <- retirement_benefit(years_worked, final_average_salary)

    current_pension <- trs_benefit
    retirement_benefit_monthly <- trs_benefit / 12 
    retirement_benefit[1] <- trs_benefit
    for (current_month in 2:(years_worked * 12)) {
      current_year <- ceiling(current_month / 12)
      current_month_in_year <- current_month %% 12
      if (current_month_in_year == 0) current_month_in_year <- 12   
      if (current_month_in_year == 9) {  # The inflation adjustment is effective each September
        sampled_inflation <- sample(inflation_data$inflation_rate, 12, replace = TRUE)
        mean_inflation <- mean(sampled_inflation)
        adjustment <- inflation_adjustment(mean_inflation)
        current_pension <- current_pension * (1 + adjustment)
      }
      retirement_benefit[current_month] <- current_pension
    }
    results[sim] <- sum(retirement_benefit)
  }

  return(results)
}
starting_salary <- 50000 
years_worked <- 20
n_simulations <- 200

# Run the simulation
trs_results <- simulate_trs_monte_carlo(n_simulations, starting_salary, years_worked, WAGE, INFLATION)

mean_trs_benefit <- mean(trs_results)
median_trs_benefit <- median(trs_results)
quantiles_trs_benefit <- quantile(trs_results, c(0.25, 0.75))

# Print the results
cat("Mean TRS Benefit: $", mean_trs_benefit, "\n")
cat("Median TRS Benefit: $", median_trs_benefit, "\n")
cat("25th and 75th Percentiles of TRS Benefit: $", quantiles_trs_benefit, "\n")
```

## ORP Contribution Simulation
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
# ORP Simulation
simulate_orp <- function(n_simulations, starting_salary, years_worked, starting_age,
                            wage_growth_data, inflation_data, equity_return_SPY_data, equity_return_ACWI_data,
                            bond_return_data, debt_return_data) {
  wage_growth_data <- na.omit(wage_growth_data)
  inflation_data <- na.omit(inflation_data)
  equity_return_SPY_data <- na.omit(equity_return_SPY_data)
  equity_return_ACWI_data <- na.omit(equity_return_ACWI_data)
  bond_return_data <- na.omit(bond_return_data)
  debt_return_data <- na.omit(debt_return_data)
  bond_return_data <- bond_return_data |> filter(date >= "2000-10-01") # limit historical data to sample from 
  bond_return_data$bond_return <- bond_return_data$bond_return/100
  debt_return_data$debt_return <- debt_return_data$debt_return/100

  results <- numeric(n_simulations)

  for (i in 1:n_simulations) {
    portfolio_value <- 0
    current_salary <- starting_salary
    total_contrib <- 0
    year <- 1
    
    for (age in starting_age:(retirement_age - 1)) {
      # Resample returns for this year (with replacement)
      wage_growth <- sample(wage_growth_data$wage_growth_percent, 1, replace = TRUE)
      inflation_rate <- sample(inflation_data$inflation_rate, 1, replace = TRUE)
      equity_return_SPY <- sample(equity_return_SPY_data$equity_return_SPY, 1, replace = TRUE)
      equity_return_ACWI <- sample(equity_return_ACWI_data$equity_return_ACWI, 1, replace = TRUE)
      bond_return <- sample(bond_return_data$bond_return, 1, replace = TRUE) 
      debt_return <- sample(debt_return_data$debt_return, 1, replace = TRUE)
     
       # Calculate the contribution for this year
      employee_contrib <- employee_contrib_rate(current_salary)
      employer_contrib <- current_salary * employer_contrib_rate(year)
      total_contrib <- employee_contrib + employer_contrib
      portfolio_value <- portfolio_value + total_contrib
      
      # convert to average annual returns
      equity_return_SPY <- (1 + equity_return_SPY) ^ 12 - 1
      equity_return_ACWI <- (1 + equity_return_ACWI) ^ 12 - 1
      bond_return <- ((1 + bond_return) ^ 12) - 1
      debt_return <- ((1 + debt_return)) ^ 12 - 1
      
      # Asset allocation based on age
      us_equities_pct <- us_equities_rate(age)
      international_pct <- international_equities_rate(age)
      bonds_pct <- bonds_rate(age)
      short_term_pct <- short_term_debt_rate(age)
      
      portfolio_value <- portfolio_value * (1 + us_equities_pct * equity_return_SPY +
                                            international_pct * equity_return_ACWI +
                                            bonds_pct * bond_return +
                                            short_term_pct * debt_return)
      current_salary <- current_salary * (1 + wage_growth + inflation_rate)
      year <- year + 1
    }
    results[i] <- portfolio_value
  }
  return(results)
}

starting_salary <- 50000
years_worked <- 20
starting_age <- 45

# Run the Monte Carlo simulation
orp_results <- simulate_orp(n_simulations, starting_salary, years_worked, starting_age,
                           WAGE, INFLATION, SPY, ACWI, BOND, DEBT)
mean_orp_benefit <- mean(orp_results)
median_orp_benefit <- median(orp_results)
quantiles_orp_benefit <- quantile(orp_results, c(0.25, 0.75))

cat("Mean OPR Benefit: $", mean_orp_benefit, "\n")
cat("Median OPR Benefit: $", median_orp_benefit, "\n")
cat("25th and 75th Percentiles of OPR Benefit: $", quantiles_orp_benefit, "\n")
```

## ORP Withdrawal Simulation
```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
simulate_orp_withdrawal <- function(orp_results, retirement_age, life_expectancy, withdrawal_rate, equity_return_SPY_data, equity_return_ACWI_data, bond_return_data, debt_return_data) {
  remaining_balances <- numeric(length(orp_results))  # Store the remaining balances for each simulation
  for (i in 1:length(orp_results)) {
    remaining_balance <- orp_results[i] 
    age_at_retirement <- retirement_age
    years_in_retirement <- life_expectancy - age_at_retirement
    # Simulate withdrawals over retirement years
    for (year in 1:years_in_retirement) {
      age_in_retirement <- age_at_retirement + year
      # Withdraw a fixed percentage of the portfolio value
      annual_withdrawal <- remaining_balance * withdrawal_rate
      remaining_balance <- remaining_balance - annual_withdrawal
      # Sample returns for this year
      equity_return_SPY <- sample(equity_return_SPY_data$equity_return_SPY, 1)
      equity_return_ACWI <- sample(equity_return_ACWI_data$equity_return_ACWI, 1)
      bond_return <- sample(bond_return_data$bond_return, 1) /100
      debt_return <- sample(debt_return_data$debt_return, 1) /100
      
      # Assume fixed portfolio allocations during retirement (could be modified)
      us_equities_pct <- us_equities_rate(age_in_retirement)
      international_pct <- international_equities_rate(age_in_retirement)
      bonds_pct <- bonds_rate(age_in_retirement)
      debt_pct <- short_term_debt_rate(age_in_retirement)
      
      remaining_balance <- remaining_balance * (1 + us_equities_pct * equity_return_SPY + 
                                                international_pct * equity_return_ACWI +
                                                bonds_pct * bond_return + 
                                                debt_pct * debt_return)
    }
    
    # Store the result for this simulation (1 = exhausted, 0 = not exhausted)
    remaining_balances[i] <- remaining_balance
  }
  return(remaining_balances)
}

# Define your assumptions for the simulation
withdrawal_rate <- 0.04  # 4% withdrawal rate
life_expectancy <- 85  # Assume the person lives to 85 years old
retirement_age <- 65  # Person retires at age 65
monthly_orp <- orp_results/(life_expectancy- retirement_age)/12


# Run the simulation for exhaustion probability
simulate_orp_withdrawal <- simulate_orp_withdrawal(orp_results, retirement_age, life_expectancy, withdrawal_rate, SPY, ACWI, BOND, DEBT)
cat("Remaining balances after withdrawals: ", simulate_orp_withdrawal, "\n")
cat("Monthly withdrawals: ", monthly_orp, "\n")

```

```{r, echo = TRUE, message = FALSE, warning = FALSE}
#| code-fold: true
#| code-title: View Code
mean_result <- mean(orp_results)
sd_result <- sd(orp_results)

options(scipen = 999)
orp_results_df <- data.frame(orp_benefit = orp_results)

ggplot(orp_results_df, aes(x = orp_benefit)) +
  geom_histogram(bins = 25, fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Adjust bins and colors as needed
  geom_vline(aes(xintercept = mean(orp_benefit)), color = "blue", linetype = "dashed", size = 1.2) +
  geom_vline(aes(xintercept = mean(orp_benefit) - sd(orp_benefit)), color = "blue", linetype = "dotted", size = 1.2) +
  geom_vline(aes(xintercept = mean(orp_benefit) + sd(orp_benefit)), color = "blue", linetype = "dotted", size = 1.2) +
  geom_text(aes(x = mean(orp_benefit), y = 0.2, label = paste("Mean:", round(mean(orp_benefit)))), 
            color = "black", vjust = -40, size = 3) +
  geom_text(aes(x = mean(orp_benefit) - sd(orp_benefit), y = 0.2, 
                label = paste("- 1 SD:", round(mean(orp_benefit) - sd(orp_benefit)))), 
            color = "black", vjust = -40, size = 3) +
  geom_text(aes(x = mean(orp_benefit) + sd(orp_benefit), y = 0.2, 
                label = paste("+ 1 SD:", round(mean(orp_benefit) + sd(orp_benefit)))), 
            color = "black", vjust = -40, size = 3) +
  labs(
    title = "Distribution of ORP Portfolio Value",
    x = "ORP Portfolio Value ($)",
    y = "Frequency"
  ) +
  theme_minimal() 

```